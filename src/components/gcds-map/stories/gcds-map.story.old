

export default {
  title: 'Components/Map',
  component: 'gcds-map',
  parameters: {
    docs: {
      description: {
        component: 'The gcds-map component provides an accessible, standards-based web map viewer using MapML.',
      },
    },
  },
  argTypes: {
    projection: {
      control: { type: 'select' },
      options: ['OSMTILE', 'CBMTILE', 'WGS84', 'APSTILE'],
      description: 'The coordinate reference system for the map',
      defaultValue: 'OSMTILE',
    },
    lat: {
      control: { type: 'number' },
      description: 'Initial latitude center of the map',
    },
    lon: {
      control: { type: 'number' },
      description: 'Initial longitude center of the map',
    },
    zoom: {
      control: { type: 'range', min: 0, max: 25, step: 1 },
      description: 'Initial zoom level',
    },
    controls: {
      control: { type: 'boolean' },
      description: 'Show map controls',
      defaultValue: true,
    },
    controlslist: {
      control: { type: 'text' },
      description: 'Space-separated list of controls to show/hide',
    },
    width: {
      control: { type: 'text' },
      description: 'Width of the map',
      defaultValue: '100%',
    },
    height: {
      control: { type: 'text' },
      description: 'Height of the map',
      defaultValue: '400px',
    },
  },
};

const Template = (args) => {
  return `
    <gcds-map
      ${args.projection ? `projection="${args.projection}"` : ''}
      ${args.lat ? `lat="${args.lat}"` : ''}
      ${args.lon ? `lon="${args.lon}"` : ''}
      ${args.zoom ? `zoom="${args.zoom}"` : ''}
      ${args.controls !== undefined ? `controls="${args.controls}"` : ''}
      ${args.controlslist ? `controlslist="${args.controlslist}"` : ''}
      ${args.width ? `width="${args.width}"` : ''}
      ${args.height ? `height="${args.height}"` : ''}
    >
      ${args.layers || ''}
    </gcds-map>
  `;
};

export const Default = Template.bind({});
Default.args = {
  projection: 'OSMTILE',
  lat: 45.4215,
  lon: -75.6972,
  zoom: 10,
  controls: true,
  width: '100%',
  height: '400px',
  layers: `
    <gcds-map-layer 
      checked 
      src="https://geogratis.gc.ca/mapml/en/osmtile/osm/"
      label="OpenStreetMap"
    ></gcds-map-layer>
  `,
};

export const WithMultipleLayers = Template.bind({});
WithMultipleLayers.args = {
  projection: 'CBMTILE',
  lat: 60.0,
  lon: -95.0,
  zoom: 3,
  controls: true,
  width: '100%',
  height: '500px',
  layers: `
    <gcds-map-layer 
      checked 
      src="https://geogratis.gc.ca/mapml/en/cbmtile/cbmt/"
      label="Canada Base Map"
    ></gcds-map-layer>
    <gcds-map-layer 
      src="https://example.com/some-overlay.mapml"
      label="Sample Overlay"
      opacity="0.7"
    ></gcds-map-layer>
  `,
};

export const MinimalControls = Template.bind({});
MinimalControls.args = {
  projection: 'WGS84',
  lat: 0,
  lon: 0,
  zoom: 2,
  controls: true,
  controlslist: 'nofullscreen nolayer',
  width: '800px',
  height: '600px',
  layers: `
    <gcds-map-layer 
      checked 
      src="https://example.com/world.mapml"
      label="World Map"
    ></gcds-map-layer>
  `,
};

export const NoControls = Template.bind({});
NoControls.args = {
  projection: 'OSMTILE',
  lat: 51.5074,
  lon: -0.1278,
  zoom: 10,
  controls: false,
  width: '100%',
  height: '300px',
  layers: `
    <gcds-map-layer 
      checked 
      src="https://geogratis.gc.ca/mapml/en/osmtile/osm/"
      label="London View"
    ></gcds-map-layer>
  `,
};

export const Playground = Template.bind({});
Playground.args = {
  projection: 'OSMTILE',
  lat: 45.4215,
  lon: -75.6972,
  zoom: 10,
  controls: true,
  width: '100%',
  height: '400px',
  layers: `
    <gcds-map-layer 
      checked 
      src="https://geogratis.gc.ca/mapml/en/osmtile/osm/"
      label="Base Map"
    ></gcds-map-layer>
  `,
};
